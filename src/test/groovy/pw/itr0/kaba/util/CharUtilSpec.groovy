package pw.itr0.kaba.util

import spock.lang.Specification
import spock.lang.Unroll

import java.nio.charset.Charset
import java.nio.charset.StandardCharsets

/**
 * Specification class for {@link CharUtil}.
 *
 * @author ryotan
 */
@Unroll
class CharUtilSpec extends Specification {
  def "エンコードを指定した場合、そのエンコードでエンコードされること。文字列化したときに元の文字列に戻ること。(#string)"() {
    expect: "char[]"
    def chars = CharUtil.bytes(string.chars, encoding)
    chars == bytes as byte[]
    new String(chars, encoding) == string

    and: "CharSequence"
    def seq = CharUtil.bytes(string, encoding)
    seq == bytes as byte[]
    new String(seq, encoding) == string

    and: "#chars"
    def act = CharUtil.chars(bytes as byte[], encoding)
    act == string.chars
    new String(act) == string

    where:
    string                   | encoding                       | bytes
    "ascii"                  | Charset.forName("US-ASCII")    | [0x61, 0x73, 0x63, 0x69, 0x69]
    "日本語"                    | Charset.forName("EUC-JP")      | [0xc6, 0xfc, 0xcb, 0xdc, 0xb8, 0xec]
    "１月～２月"                  | Charset.forName("Windows-31J") | [0x82, 0x50, 0x8c, 0x8e, 0x81, 0x60, 0x82, 0x51, 0x8c, 0x8e]
    "(ಠ⌣ಠ)"                  | StandardCharsets.UTF_8         | [0x28, 0xe0, 0xb2, 0xa0, 0xe2, 0x8c, 0xa3, 0xe0, 0xb2, 0xa0, 0x29]
    "サロゲートペアに対応していないと𠮟られる。" | StandardCharsets.UTF_16        | [0xfe, 0xff, 0x30, 0xb5, 0x30, 0xed, 0x30, 0xb2, 0x30, 0xfc,
                                                                 0x30, 0xc8, 0x30, 0xda, 0x30, 0xa2, 0x30, 0x6b, 0x5b, 0xfe, 0x5f, 0xdc,
                                                                 0x30, 0x57, 0x30, 0x66, 0x30, 0x44, 0x30, 0x6a, 0x30, 0x44, 0x30, 0x68,
                                                                 0xd8, 0x42, 0xdf, 0x9f, 0x30, 0x89, 0x30, 0x8c, 0x30, 0x8b, 0x30, 0x02]
    "♫📱♪"                   | StandardCharsets.UTF_16LE      | [0x6b, 0x26, 0x3d, 0xd8, 0xf1, 0xdc, 0x6a, 0x26]
    "♫📱♪"                   | StandardCharsets.UTF_16BE      | [0x26, 0x6b, 0xd8, 0x3d, 0xdc, 0xf1, 0x26, 0x6a]
  }

  def "エンコードを指定しない場合、UTF-8でエンコードされること。文字列化したときに元の文字列に戻ること。"() {
    expect: "char[]"
    def chars = CharUtil.bytes(string.chars)
    chars == bytes as byte[]
    new String(chars, StandardCharsets.UTF_8) == string

    and: "CharSequence"
    def seq = CharUtil.bytes(string)
    seq == bytes as byte[]
    new String(seq, StandardCharsets.UTF_8) == string

    and: "#chars"
    def act = CharUtil.chars(bytes as byte[])
    act == string.chars
    new String(act) == string

    where:
    string             | bytes
    "ascii"            | [0x61, 0x73, 0x63, 0x69, 0x69]
    "日本語"              | [0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0xac, 0xe8, 0xaa, 0x9e]
    "１月～２月"            | [0xef, 0xbc, 0x91, 0xe6, 0x9c, 0x88, 0xef, 0xbd, 0x9e, 0xef, 0xbc, 0x92, 0xe6, 0x9c, 0x88]
    "(ಠ⌣ಠ)"            | [0x28, 0xe0, 0xb2, 0xa0, 0xe2, 0x8c, 0xa3, 0xe0, 0xb2, 0xa0, 0x29]
    "サロゲートペアに対応" +
        "していないと𠮟られる。" | [0xe3, 0x82, 0xb5, 0xe3, 0x83, 0xad, 0xe3, 0x82, 0xb2, 0xe3, 0x83, 0xbc, 0xe3, 0x83, 0x88, 0xe3, 0x83,
                          0x9a, 0xe3, 0x82, 0xa2, 0xe3, 0x81, 0xab, 0xe5, 0xaf, 0xbe, 0xe5, 0xbf, 0x9c, 0xe3, 0x81, 0x97, 0xe3, 0x81,
                          0xa6, 0xe3, 0x81, 0x84, 0xe3, 0x81, 0xaa, 0xe3, 0x81, 0x84, 0xe3, 0x81, 0xa8, 0xf0, 0xa0, 0xae, 0x9f, 0xe3,
                          0x82, 0x89, 0xe3, 0x82, 0x8c, 0xe3, 0x82, 0x8b, 0xe3, 0x80, 0x82]
    "♫📱♪"             | [0xe2, 0x99, 0xab, 0xf0, 0x9f, 0x93, 0xb1, 0xe2, 0x99, 0xaa]
  }

  def "カバレッジツールがprivate constructorをignoreしてくれればいいのに。。。"() {
    def util = new CharUtil()

    expect:
    util instanceof CharUtil
  }
}
